#!/usr/bin/env python3
"""
Test runner script for the tokenizer Azure Function
"""
import subprocess
import sys
import os


def install_test_dependencies():
    """Install test dependencies"""
    print("📦 Installing test dependencies...")
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "-r", "test_requirements.txt"
        ], check=True, capture_output=True, text=True)
        print("✅ Test dependencies installed")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install test dependencies: {e.stderr}")
        return False


def run_unit_tests():
    """Run unit tests with pytest"""
    print("\n🧪 Running unit tests...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/",
        "-v",
        "--tb=short",
        "--cov=TokenizerFunction",
        "--cov-report=term-missing",
        "--cov-report=html:htmlcov",
    ]
    
    try:
        result = subprocess.run(cmd, check=False, text=True)
        return result.returncode == 0
    except Exception as e:
        print(f"❌ Error running tests: {e}")
        return False


def run_integration_tests():
    """Run integration tests (if function is running locally)"""
    print("\n🔗 Running integration tests...")
    
    # Check if function is running locally
    try:
        import requests
        response = requests.get("http://localhost:7071/api/TokenizerFunction", timeout=2)
        if response.status_code == 200:
            print("✅ Function is running locally")
            
            # Run the integration test
            cmd = [sys.executable, "test_local.py"]
            result = subprocess.run(cmd, check=False, text=True)
            return result.returncode == 0
        else:
            print("⚠️ Function not responding correctly")
            return False
    except requests.exceptions.RequestException:
        print("⚠️ Function not running locally - skipping integration tests")
        print("   Start the function with 'func start' to run integration tests")
        return True  # Don't fail the build if integration tests can't run


def run_linting():
    """Run code linting"""
    print("\n🔍 Running linting...")
    
    # Try to run flake8
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "flake8"], 
                      capture_output=True, check=True)
        
        cmd = [
            sys.executable, "-m", "flake8",
            "TokenizerFunction/",
            "--max-line-length=100",
            "--ignore=E203,W503"  # Ignore some style issues
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, check=False)
        
        if result.returncode == 0:
            print("✅ Linting passed")
            return True
        else:
            print("⚠️ Linting issues found:")
            print(result.stdout)
            return False
            
    except subprocess.CalledProcessError:
        print("⚠️ Could not install flake8 - skipping linting")
        return True


def generate_coverage_report():
    """Generate and display coverage report"""
    print("\n📊 Coverage Report:")
    try:
        # Coverage report is already generated by pytest
        # Just check if HTML report was created
        if os.path.exists("htmlcov/index.html"):
            print("✅ HTML coverage report generated: htmlcov/index.html")
        
        return True
    except Exception as e:
        print(f"⚠️ Could not generate coverage report: {e}")
        return False


def main():
    """Main test runner"""
    print("🚀 Starting Azure Function Test Suite")
    print("=" * 50)
    
    # Track results
    results = []
    
    # Install dependencies
    if install_test_dependencies():
        results.append(("Dependencies", True))
    else:
        results.append(("Dependencies", False))
        print("❌ Cannot proceed without test dependencies")
        sys.exit(1)
    
    # Run unit tests
    unit_test_result = run_unit_tests()
    results.append(("Unit Tests", unit_test_result))
    
    # Run integration tests
    integration_test_result = run_integration_tests()
    results.append(("Integration Tests", integration_test_result))
    
    # Run linting
    linting_result = run_linting()
    results.append(("Linting", linting_result))
    
    # Generate coverage report
    coverage_result = generate_coverage_report()
    results.append(("Coverage Report", coverage_result))
    
    # Print summary
    print("\n" + "=" * 50)
    print("📋 Test Summary:")
    print("=" * 50)
    
    for test_name, success in results:
        status = "✅ PASSED" if success else "❌ FAILED"
        print(f"{test_name:<20}: {status}")
    
    # Overall result
    failed_tests = [name for name, success in results if not success]
    
    if failed_tests:
        print(f"\n❌ Some tests failed: {', '.join(failed_tests)}")
        sys.exit(1)
    else:
        print("\n🎉 All tests passed!")
        sys.exit(0)


if __name__ == "__main__":
    main()